//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskParser.adminReplicControlServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginAccountData", Namespace="http://schemas.datacontract.org/2004/07/ReplicControl.Common.CommonContracts")]
    [System.SerializableAttribute()]
    public partial class LoginAccountData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> ReplicIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpreadCoefficientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> ReplicId {
            get {
                return this.ReplicIdField;
            }
            set {
                if ((this.ReplicIdField.Equals(value) != true)) {
                    this.ReplicIdField = value;
                    this.RaisePropertyChanged("ReplicId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpreadCoefficient {
            get {
                return this.SpreadCoefficientField;
            }
            set {
                if ((this.SpreadCoefficientField.Equals(value) != true)) {
                    this.SpreadCoefficientField = value;
                    this.RaisePropertyChanged("SpreadCoefficient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserType {
            get {
                return this.UserTypeField;
            }
            set {
                if ((this.UserTypeField.Equals(value) != true)) {
                    this.UserTypeField = value;
                    this.RaisePropertyChanged("UserType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReplicInfoDataContract", Namespace="http://schemas.datacontract.org/2004/07/ReplicControl.Common.CommonContracts")]
    [System.SerializableAttribute()]
    public partial class ReplicInfoDataContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateLoadedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFullField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IterationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IterationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IterationNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] LockedObjectIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatformVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> PrevReplicIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> PrevReplicIterationNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> PrevReplicVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateLoaded {
            get {
                return this.DateLoadedField;
            }
            set {
                if ((this.DateLoadedField.Equals(value) != true)) {
                    this.DateLoadedField = value;
                    this.RaisePropertyChanged("DateLoaded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFull {
            get {
                return this.IsFullField;
            }
            set {
                if ((this.IsFullField.Equals(value) != true)) {
                    this.IsFullField = value;
                    this.RaisePropertyChanged("IsFull");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IterationId {
            get {
                return this.IterationIdField;
            }
            set {
                if ((this.IterationIdField.Equals(value) != true)) {
                    this.IterationIdField = value;
                    this.RaisePropertyChanged("IterationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IterationName {
            get {
                return this.IterationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IterationNameField, value) != true)) {
                    this.IterationNameField = value;
                    this.RaisePropertyChanged("IterationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IterationNumber {
            get {
                return this.IterationNumberField;
            }
            set {
                if ((this.IterationNumberField.Equals(value) != true)) {
                    this.IterationNumberField = value;
                    this.RaisePropertyChanged("IterationNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] LockedObjectIds {
            get {
                return this.LockedObjectIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.LockedObjectIdsField, value) != true)) {
                    this.LockedObjectIdsField = value;
                    this.RaisePropertyChanged("LockedObjectIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlatformVersion {
            get {
                return this.PlatformVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatformVersionField, value) != true)) {
                    this.PlatformVersionField = value;
                    this.RaisePropertyChanged("PlatformVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> PrevReplicID {
            get {
                return this.PrevReplicIDField;
            }
            set {
                if ((this.PrevReplicIDField.Equals(value) != true)) {
                    this.PrevReplicIDField = value;
                    this.RaisePropertyChanged("PrevReplicID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> PrevReplicIterationNumber {
            get {
                return this.PrevReplicIterationNumberField;
            }
            set {
                if ((this.PrevReplicIterationNumberField.Equals(value) != true)) {
                    this.PrevReplicIterationNumberField = value;
                    this.RaisePropertyChanged("PrevReplicIterationNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> PrevReplicVersion {
            get {
                return this.PrevReplicVersionField;
            }
            set {
                if ((this.PrevReplicVersionField.Equals(value) != true)) {
                    this.PrevReplicVersionField = value;
                    this.RaisePropertyChanged("PrevReplicVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IterationDataContract", Namespace="http://schemas.datacontract.org/2004/07/ReplicControl.Common.CommonContracts")]
    [System.SerializableAttribute()]
    public partial class IterationDataContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FieldsIdentifiersStepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NeedSpreadIdentifiersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ObjectsIdentifiersStepField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FieldsIdentifiersStep {
            get {
                return this.FieldsIdentifiersStepField;
            }
            set {
                if ((this.FieldsIdentifiersStepField.Equals(value) != true)) {
                    this.FieldsIdentifiersStepField = value;
                    this.RaisePropertyChanged("FieldsIdentifiersStep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NeedSpreadIdentifiers {
            get {
                return this.NeedSpreadIdentifiersField;
            }
            set {
                if ((this.NeedSpreadIdentifiersField.Equals(value) != true)) {
                    this.NeedSpreadIdentifiersField = value;
                    this.RaisePropertyChanged("NeedSpreadIdentifiers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ObjectsIdentifiersStep {
            get {
                return this.ObjectsIdentifiersStepField;
            }
            set {
                if ((this.ObjectsIdentifiersStepField.Equals(value) != true)) {
                    this.ObjectsIdentifiersStepField = value;
                    this.RaisePropertyChanged("ObjectsIdentifiersStep");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfoContract", Namespace="http://schemas.datacontract.org/2004/07/ReplicControl.AdminDataContract")]
    [System.SerializableAttribute()]
    public partial class UserInfoContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IssueTrackerUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PasswordChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpreadCoefficientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IssueTrackerUserId {
            get {
                return this.IssueTrackerUserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueTrackerUserIdField, value) != true)) {
                    this.IssueTrackerUserIdField = value;
                    this.RaisePropertyChanged("IssueTrackerUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PasswordChanged {
            get {
                return this.PasswordChangedField;
            }
            set {
                if ((this.PasswordChangedField.Equals(value) != true)) {
                    this.PasswordChangedField = value;
                    this.RaisePropertyChanged("PasswordChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpreadCoefficient {
            get {
                return this.SpreadCoefficientField;
            }
            set {
                if ((this.SpreadCoefficientField.Equals(value) != true)) {
                    this.SpreadCoefficientField = value;
                    this.RaisePropertyChanged("SpreadCoefficient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserType {
            get {
                return this.UserTypeField;
            }
            set {
                if ((this.UserTypeField.Equals(value) != true)) {
                    this.UserTypeField = value;
                    this.RaisePropertyChanged("UserType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectDataContract", Namespace="http://schemas.datacontract.org/2004/07/ReplicControl.AdminDataContract")]
    [System.SerializableAttribute()]
    public partial class ObjectDataContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CaptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MarkedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Caption {
            get {
                return this.CaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CaptionField, value) != true)) {
                    this.CaptionField = value;
                    this.RaisePropertyChanged("Caption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Marked {
            get {
                return this.MarkedField;
            }
            set {
                if ((this.MarkedField.Equals(value) != true)) {
                    this.MarkedField = value;
                    this.RaisePropertyChanged("Marked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/ReplicControl.Common.CommonContracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TaskParser.adminReplicControlServiceReference.OperationResultOfbase64Binary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TaskParser.adminReplicControlServiceReference.OperationResultOfArrayOflonguHEDJ7Dj))]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TaskParser.adminReplicControlServiceReference.OperationResult.Cancelation[] CancelationReasonsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanceledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommonCancelationReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TaskParser.adminReplicControlServiceReference.UpdateStatus UpdateStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TaskParser.adminReplicControlServiceReference.OperationResult.Cancelation[] CancelationReasons {
            get {
                return this.CancelationReasonsField;
            }
            set {
                if ((object.ReferenceEquals(this.CancelationReasonsField, value) != true)) {
                    this.CancelationReasonsField = value;
                    this.RaisePropertyChanged("CancelationReasons");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Canceled {
            get {
                return this.CanceledField;
            }
            set {
                if ((this.CanceledField.Equals(value) != true)) {
                    this.CanceledField = value;
                    this.RaisePropertyChanged("Canceled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommonCancelationReason {
            get {
                return this.CommonCancelationReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.CommonCancelationReasonField, value) != true)) {
                    this.CommonCancelationReasonField = value;
                    this.RaisePropertyChanged("CommonCancelationReason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TaskParser.adminReplicControlServiceReference.UpdateStatus UpdateStatus {
            get {
                return this.UpdateStatusField;
            }
            set {
                if ((this.UpdateStatusField.Equals(value) != true)) {
                    this.UpdateStatusField = value;
                    this.RaisePropertyChanged("UpdateStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult.Cancelation", Namespace="http://schemas.datacontract.org/2004/07/ReplicControl.Common.CommonContracts")]
        [System.SerializableAttribute()]
        public partial class Cancelation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string CancelationReasonField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string CanceledPluginNameField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string CancelationReason {
                get {
                    return this.CancelationReasonField;
                }
                set {
                    if ((object.ReferenceEquals(this.CancelationReasonField, value) != true)) {
                        this.CancelationReasonField = value;
                        this.RaisePropertyChanged("CancelationReason");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string CanceledPluginName {
                get {
                    return this.CanceledPluginNameField;
                }
                set {
                    if ((object.ReferenceEquals(this.CanceledPluginNameField, value) != true)) {
                        this.CanceledPluginNameField = value;
                        this.RaisePropertyChanged("CanceledPluginName");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultOfbase64Binary", Namespace="http://schemas.datacontract.org/2004/07/ReplicControl.Common.CommonContracts")]
    [System.SerializableAttribute()]
    public partial class OperationResultOfbase64Binary : TaskParser.adminReplicControlServiceReference.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultOfArrayOflonguHEDJ7Dj", Namespace="http://schemas.datacontract.org/2004/07/ReplicControl.Common.CommonContracts")]
    [System.SerializableAttribute()]
    public partial class OperationResultOfArrayOflonguHEDJ7Dj : TaskParser.adminReplicControlServiceReference.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateStatus", Namespace="http://schemas.datacontract.org/2004/07/ReplicControl.Common.CommonContracts")]
    public enum UpdateStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Busy = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="adminReplicControlServiceReference.IAdminReplicService")]
    public interface IAdminReplicService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Login", ReplyAction="http://tempuri.org/IBaseService/LoginResponse")]
        TaskParser.adminReplicControlServiceReference.LoginAccountData Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string passwordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Login", ReplyAction="http://tempuri.org/IBaseService/LoginResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.LoginAccountData> LoginAsync(string login, string passwordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetReplicsInfo", ReplyAction="http://tempuri.org/IBaseService/GetReplicsInfoResponse")]
        TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract[] GetReplicsInfo(System.DateTime dateFrom, System.DateTime dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetReplicsInfo", ReplyAction="http://tempuri.org/IBaseService/GetReplicsInfoResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract[]> GetReplicsInfoAsync(System.DateTime dateFrom, System.DateTime dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetReplicData", ReplyAction="http://tempuri.org/IBaseService/GetReplicDataResponse")]
        byte[] GetReplicData(long replicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetReplicData", ReplyAction="http://tempuri.org/IBaseService/GetReplicDataResponse")]
        System.Threading.Tasks.Task<byte[]> GetReplicDataAsync(long replicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetReplicsInfoByObjects", ReplyAction="http://tempuri.org/IBaseService/GetReplicsInfoByObjectsResponse")]
        TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract[] GetReplicsInfoByObjects(long[] objectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetReplicsInfoByObjects", ReplyAction="http://tempuri.org/IBaseService/GetReplicsInfoByObjectsResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract[]> GetReplicsInfoByObjectsAsync(long[] objectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetIterationInfoById", ReplyAction="http://tempuri.org/IBaseService/GetIterationInfoByIdResponse")]
        TaskParser.adminReplicControlServiceReference.IterationDataContract GetIterationInfoById(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetIterationInfoById", ReplyAction="http://tempuri.org/IBaseService/GetIterationInfoByIdResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.IterationDataContract> GetIterationInfoByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetIssueSummary", ReplyAction="http://tempuri.org/IBaseService/GetIssueSummaryResponse")]
        string GetIssueSummary(string issueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetIssueSummary", ReplyAction="http://tempuri.org/IBaseService/GetIssueSummaryResponse")]
        System.Threading.Tasks.Task<string> GetIssueSummaryAsync(string issueId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetAllUsers", ReplyAction="http://tempuri.org/IAdminReplicService/GetAllUsersResponse")]
        TaskParser.adminReplicControlServiceReference.UserInfoContract[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetAllUsers", ReplyAction="http://tempuri.org/IAdminReplicService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.UserInfoContract[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/UpdateUsers", ReplyAction="http://tempuri.org/IAdminReplicService/UpdateUsersResponse")]
        long[] UpdateUsers(TaskParser.adminReplicControlServiceReference.UserInfoContract[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/UpdateUsers", ReplyAction="http://tempuri.org/IAdminReplicService/UpdateUsersResponse")]
        System.Threading.Tasks.Task<long[]> UpdateUsersAsync(TaskParser.adminReplicControlServiceReference.UserInfoContract[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/LoginExists", ReplyAction="http://tempuri.org/IAdminReplicService/LoginExistsResponse")]
        bool LoginExists(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/LoginExists", ReplyAction="http://tempuri.org/IAdminReplicService/LoginExistsResponse")]
        System.Threading.Tasks.Task<bool> LoginExistsAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetAllObjects", ReplyAction="http://tempuri.org/IAdminReplicService/GetAllObjectsResponse")]
        TaskParser.adminReplicControlServiceReference.ObjectDataContract[] GetAllObjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetAllObjects", ReplyAction="http://tempuri.org/IAdminReplicService/GetAllObjectsResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.ObjectDataContract[]> GetAllObjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetCentralReplicInfo", ReplyAction="http://tempuri.org/IAdminReplicService/GetCentralReplicInfoResponse")]
        TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract GetCentralReplicInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetCentralReplicInfo", ReplyAction="http://tempuri.org/IAdminReplicService/GetCentralReplicInfoResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract> GetCentralReplicInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/UpdateMainDbToVersion", ReplyAction="http://tempuri.org/IAdminReplicService/UpdateMainDbToVersionResponse")]
        TaskParser.adminReplicControlServiceReference.OperationResult UpdateMainDbToVersion(long replicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/UpdateMainDbToVersion", ReplyAction="http://tempuri.org/IAdminReplicService/UpdateMainDbToVersionResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResult> UpdateMainDbToVersionAsync(long replicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/UpdateMainDbToLatestVersion", ReplyAction="http://tempuri.org/IAdminReplicService/UpdateMainDbToLatestVersionResponse")]
        TaskParser.adminReplicControlServiceReference.OperationResult UpdateMainDbToLatestVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/UpdateMainDbToLatestVersion", ReplyAction="http://tempuri.org/IAdminReplicService/UpdateMainDbToLatestVersionResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResult> UpdateMainDbToLatestVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/IsMainDbHasLatestVersion", ReplyAction="http://tempuri.org/IAdminReplicService/IsMainDbHasLatestVersionResponse")]
        bool IsMainDbHasLatestVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/IsMainDbHasLatestVersion", ReplyAction="http://tempuri.org/IAdminReplicService/IsMainDbHasLatestVersionResponse")]
        System.Threading.Tasks.Task<bool> IsMainDbHasLatestVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/CreateFullReplic", ReplyAction="http://tempuri.org/IAdminReplicService/CreateFullReplicResponse")]
        TaskParser.adminReplicControlServiceReference.OperationResult CreateFullReplic(long userId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/CreateFullReplic", ReplyAction="http://tempuri.org/IAdminReplicService/CreateFullReplicResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResult> CreateFullReplicAsync(long userId, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetAllIterations", ReplyAction="http://tempuri.org/IAdminReplicService/GetAllIterationsResponse")]
        TaskParser.adminReplicControlServiceReference.IterationDataContract[] GetAllIterations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetAllIterations", ReplyAction="http://tempuri.org/IAdminReplicService/GetAllIterationsResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.IterationDataContract[]> GetAllIterationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/UpdateIterationName", ReplyAction="http://tempuri.org/IAdminReplicService/UpdateIterationNameResponse")]
        TaskParser.adminReplicControlServiceReference.OperationResult UpdateIterationName(long iterationId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/UpdateIterationName", ReplyAction="http://tempuri.org/IAdminReplicService/UpdateIterationNameResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResult> UpdateIterationNameAsync(long iterationId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/BeginNewIteration", ReplyAction="http://tempuri.org/IAdminReplicService/BeginNewIterationResponse")]
        TaskParser.adminReplicControlServiceReference.OperationResult BeginNewIteration(long userId, TaskParser.adminReplicControlServiceReference.IterationDataContract iterationInfo, string fullReplicName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/BeginNewIteration", ReplyAction="http://tempuri.org/IAdminReplicService/BeginNewIterationResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResult> BeginNewIterationAsync(long userId, TaskParser.adminReplicControlServiceReference.IterationDataContract iterationInfo, string fullReplicName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetFullReplic", ReplyAction="http://tempuri.org/IAdminReplicService/GetFullReplicResponse")]
        TaskParser.adminReplicControlServiceReference.OperationResultOfbase64Binary GetFullReplic();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetFullReplic", ReplyAction="http://tempuri.org/IAdminReplicService/GetFullReplicResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResultOfbase64Binary> GetFullReplicAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetPartialReplic", ReplyAction="http://tempuri.org/IAdminReplicService/GetPartialReplicResponse")]
        byte[] GetPartialReplic(long[] objectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetPartialReplic", ReplyAction="http://tempuri.org/IAdminReplicService/GetPartialReplicResponse")]
        System.Threading.Tasks.Task<byte[]> GetPartialReplicAsync(long[] objectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetIssueTrackerUserName", ReplyAction="http://tempuri.org/IAdminReplicService/GetIssueTrackerUserNameResponse")]
        string GetIssueTrackerUserName(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/GetIssueTrackerUserName", ReplyAction="http://tempuri.org/IAdminReplicService/GetIssueTrackerUserNameResponse")]
        System.Threading.Tasks.Task<string> GetIssueTrackerUserNameAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/SaveInitialFullReplic", ReplyAction="http://tempuri.org/IAdminReplicService/SaveInitialFullReplicResponse")]
        void SaveInitialFullReplic(byte[] data, long userId, string platformVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/SaveInitialFullReplic", ReplyAction="http://tempuri.org/IAdminReplicService/SaveInitialFullReplicResponse")]
        System.Threading.Tasks.Task SaveInitialFullReplicAsync(byte[] data, long userId, string platformVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/IsInitialFullReplicExists", ReplyAction="http://tempuri.org/IAdminReplicService/IsInitialFullReplicExistsResponse")]
        bool IsInitialFullReplicExists();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/IsInitialFullReplicExists", ReplyAction="http://tempuri.org/IAdminReplicService/IsInitialFullReplicExistsResponse")]
        System.Threading.Tasks.Task<bool> IsInitialFullReplicExistsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/DeleteObjects", ReplyAction="http://tempuri.org/IAdminReplicService/DeleteObjectsResponse")]
        TaskParser.adminReplicControlServiceReference.OperationResultOfArrayOflonguHEDJ7Dj DeleteObjects(long userId, long[] objectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/DeleteObjects", ReplyAction="http://tempuri.org/IAdminReplicService/DeleteObjectsResponse")]
        System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResultOfArrayOflonguHEDJ7Dj> DeleteObjectsAsync(long userId, long[] objectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/ChangeObjectsMarking", ReplyAction="http://tempuri.org/IAdminReplicService/ChangeObjectsMarkingResponse")]
        void ChangeObjectsMarking(long[] objectIds, bool marked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminReplicService/ChangeObjectsMarking", ReplyAction="http://tempuri.org/IAdminReplicService/ChangeObjectsMarkingResponse")]
        System.Threading.Tasks.Task ChangeObjectsMarkingAsync(long[] objectIds, bool marked);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminReplicServiceChannel : TaskParser.adminReplicControlServiceReference.IAdminReplicService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminReplicServiceClient : System.ServiceModel.ClientBase<TaskParser.adminReplicControlServiceReference.IAdminReplicService>, TaskParser.adminReplicControlServiceReference.IAdminReplicService {
        
        public AdminReplicServiceClient() {
        }
        
        public AdminReplicServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminReplicServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminReplicServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminReplicServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TaskParser.adminReplicControlServiceReference.LoginAccountData Login(string login1, string passwordHash) {
            return base.Channel.Login(login1, passwordHash);
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.LoginAccountData> LoginAsync(string login, string passwordHash) {
            return base.Channel.LoginAsync(login, passwordHash);
        }
        
        public TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract[] GetReplicsInfo(System.DateTime dateFrom, System.DateTime dateTo) {
            return base.Channel.GetReplicsInfo(dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract[]> GetReplicsInfoAsync(System.DateTime dateFrom, System.DateTime dateTo) {
            return base.Channel.GetReplicsInfoAsync(dateFrom, dateTo);
        }
        
        public byte[] GetReplicData(long replicId) {
            return base.Channel.GetReplicData(replicId);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetReplicDataAsync(long replicId) {
            return base.Channel.GetReplicDataAsync(replicId);
        }
        
        public TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract[] GetReplicsInfoByObjects(long[] objectIds) {
            return base.Channel.GetReplicsInfoByObjects(objectIds);
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract[]> GetReplicsInfoByObjectsAsync(long[] objectIds) {
            return base.Channel.GetReplicsInfoByObjectsAsync(objectIds);
        }
        
        public TaskParser.adminReplicControlServiceReference.IterationDataContract GetIterationInfoById(long id) {
            return base.Channel.GetIterationInfoById(id);
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.IterationDataContract> GetIterationInfoByIdAsync(long id) {
            return base.Channel.GetIterationInfoByIdAsync(id);
        }
        
        public string GetIssueSummary(string issueId) {
            return base.Channel.GetIssueSummary(issueId);
        }
        
        public System.Threading.Tasks.Task<string> GetIssueSummaryAsync(string issueId) {
            return base.Channel.GetIssueSummaryAsync(issueId);
        }
        
        public TaskParser.adminReplicControlServiceReference.UserInfoContract[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.UserInfoContract[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public long[] UpdateUsers(TaskParser.adminReplicControlServiceReference.UserInfoContract[] users) {
            return base.Channel.UpdateUsers(users);
        }
        
        public System.Threading.Tasks.Task<long[]> UpdateUsersAsync(TaskParser.adminReplicControlServiceReference.UserInfoContract[] users) {
            return base.Channel.UpdateUsersAsync(users);
        }
        
        public bool LoginExists(string login) {
            return base.Channel.LoginExists(login);
        }
        
        public System.Threading.Tasks.Task<bool> LoginExistsAsync(string login) {
            return base.Channel.LoginExistsAsync(login);
        }
        
        public TaskParser.adminReplicControlServiceReference.ObjectDataContract[] GetAllObjects() {
            return base.Channel.GetAllObjects();
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.ObjectDataContract[]> GetAllObjectsAsync() {
            return base.Channel.GetAllObjectsAsync();
        }
        
        public TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract GetCentralReplicInfo() {
            return base.Channel.GetCentralReplicInfo();
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.ReplicInfoDataContract> GetCentralReplicInfoAsync() {
            return base.Channel.GetCentralReplicInfoAsync();
        }
        
        public TaskParser.adminReplicControlServiceReference.OperationResult UpdateMainDbToVersion(long replicId) {
            return base.Channel.UpdateMainDbToVersion(replicId);
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResult> UpdateMainDbToVersionAsync(long replicId) {
            return base.Channel.UpdateMainDbToVersionAsync(replicId);
        }
        
        public TaskParser.adminReplicControlServiceReference.OperationResult UpdateMainDbToLatestVersion() {
            return base.Channel.UpdateMainDbToLatestVersion();
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResult> UpdateMainDbToLatestVersionAsync() {
            return base.Channel.UpdateMainDbToLatestVersionAsync();
        }
        
        public bool IsMainDbHasLatestVersion() {
            return base.Channel.IsMainDbHasLatestVersion();
        }
        
        public System.Threading.Tasks.Task<bool> IsMainDbHasLatestVersionAsync() {
            return base.Channel.IsMainDbHasLatestVersionAsync();
        }
        
        public TaskParser.adminReplicControlServiceReference.OperationResult CreateFullReplic(long userId, string comment) {
            return base.Channel.CreateFullReplic(userId, comment);
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResult> CreateFullReplicAsync(long userId, string comment) {
            return base.Channel.CreateFullReplicAsync(userId, comment);
        }
        
        public TaskParser.adminReplicControlServiceReference.IterationDataContract[] GetAllIterations() {
            return base.Channel.GetAllIterations();
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.IterationDataContract[]> GetAllIterationsAsync() {
            return base.Channel.GetAllIterationsAsync();
        }
        
        public TaskParser.adminReplicControlServiceReference.OperationResult UpdateIterationName(long iterationId, string name) {
            return base.Channel.UpdateIterationName(iterationId, name);
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResult> UpdateIterationNameAsync(long iterationId, string name) {
            return base.Channel.UpdateIterationNameAsync(iterationId, name);
        }
        
        public TaskParser.adminReplicControlServiceReference.OperationResult BeginNewIteration(long userId, TaskParser.adminReplicControlServiceReference.IterationDataContract iterationInfo, string fullReplicName) {
            return base.Channel.BeginNewIteration(userId, iterationInfo, fullReplicName);
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResult> BeginNewIterationAsync(long userId, TaskParser.adminReplicControlServiceReference.IterationDataContract iterationInfo, string fullReplicName) {
            return base.Channel.BeginNewIterationAsync(userId, iterationInfo, fullReplicName);
        }
        
        public TaskParser.adminReplicControlServiceReference.OperationResultOfbase64Binary GetFullReplic() {
            return base.Channel.GetFullReplic();
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResultOfbase64Binary> GetFullReplicAsync() {
            return base.Channel.GetFullReplicAsync();
        }
        
        public byte[] GetPartialReplic(long[] objectIds) {
            return base.Channel.GetPartialReplic(objectIds);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPartialReplicAsync(long[] objectIds) {
            return base.Channel.GetPartialReplicAsync(objectIds);
        }
        
        public string GetIssueTrackerUserName(string userId) {
            return base.Channel.GetIssueTrackerUserName(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetIssueTrackerUserNameAsync(string userId) {
            return base.Channel.GetIssueTrackerUserNameAsync(userId);
        }
        
        public void SaveInitialFullReplic(byte[] data, long userId, string platformVersion) {
            base.Channel.SaveInitialFullReplic(data, userId, platformVersion);
        }
        
        public System.Threading.Tasks.Task SaveInitialFullReplicAsync(byte[] data, long userId, string platformVersion) {
            return base.Channel.SaveInitialFullReplicAsync(data, userId, platformVersion);
        }
        
        public bool IsInitialFullReplicExists() {
            return base.Channel.IsInitialFullReplicExists();
        }
        
        public System.Threading.Tasks.Task<bool> IsInitialFullReplicExistsAsync() {
            return base.Channel.IsInitialFullReplicExistsAsync();
        }
        
        public TaskParser.adminReplicControlServiceReference.OperationResultOfArrayOflonguHEDJ7Dj DeleteObjects(long userId, long[] objectIds) {
            return base.Channel.DeleteObjects(userId, objectIds);
        }
        
        public System.Threading.Tasks.Task<TaskParser.adminReplicControlServiceReference.OperationResultOfArrayOflonguHEDJ7Dj> DeleteObjectsAsync(long userId, long[] objectIds) {
            return base.Channel.DeleteObjectsAsync(userId, objectIds);
        }
        
        public void ChangeObjectsMarking(long[] objectIds, bool marked) {
            base.Channel.ChangeObjectsMarking(objectIds, marked);
        }
        
        public System.Threading.Tasks.Task ChangeObjectsMarkingAsync(long[] objectIds, bool marked) {
            return base.Channel.ChangeObjectsMarkingAsync(objectIds, marked);
        }
    }
}
